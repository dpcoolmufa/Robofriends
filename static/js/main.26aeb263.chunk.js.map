{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Search.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","robots","cardComponent","map","user","i","key","Search","search","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearch","event","target","value","fetch","then","response","json","users","filterrob","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAZH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MACnB,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAA1B,mBACrB,6BACI,4BAAKC,GACL,2BAAIC,MCMNI,EAZA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAeD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAElF,OACI,6BACKM,ICGEK,EATF,SAAC,GAAwB,EAAvBC,OAAwB,IAAjBC,EAAgB,EAAhBA,aAClB,OACI,yBAAKZ,UAAU,OACX,2BAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCIrGI,EARF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,WCcJC,E,YAhBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAM,CACPC,UAAU,GAHA,E,+EAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,+DAEJG,KAAKX,MAAMK,a,GAdEQ,IAAMC,WCwCnBC,G,kBAlCX,aAAe,IAAD,8BACV,+CAWJC,SAAW,SAACC,GACR,EAAKL,SAAS,CAAElB,OAAQuB,EAAMC,OAAOC,SAXrC,EAAKZ,MAAQ,CACTpB,OAAQ,GACRO,OAAQ,IAJF,E,iFAOO,IAAD,OAChB0B,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKZ,SAAS,CAAEzB,OAAQqC,S,+BAMvC,IAAD,EACsBb,KAAKJ,MAAxBpB,EADH,EACGA,OAAQO,EADX,EACWA,OACV+B,EAAYtC,EAAOuC,QAAO,SAAAvC,GAC5B,OAAOA,EAAON,KAAK8C,cAAcC,SAASlC,EAAOiC,kBAErD,OAAQxC,EAAO0C,OAEX,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAQY,aAAcgB,KAAKK,WAC3B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAAQsC,OAN9B,8C,GAvBMZ,IAAMC,YCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.26aeb263.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({id ,name,email}) =>{\r\n    return(\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"Mohamed\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n             <div>\r\n                 <h2>{name}</h2>\r\n                 <p>{email}</p>\r\n             </div>                      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\nconst Cardlist=({robots})=>{\r\n    const cardComponent= robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>                        \r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Search=({search,searchchange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--black bg-lightest-blue' type='search' placeholder=\"Search robots\" onChange={searchchange}/>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Search;","import React from 'react'\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'3px solid black',height:'400px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n};\r\nexport default Scroll;","import React from 'react'\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oops. something just went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary; ","import React from 'react'\r\nimport Cardlist from '../components/Cardlist'\r\nimport Search from '../components/Search'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css'\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            search: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => { this.setState({ robots: users }) })\r\n    }\r\n    onSearch = (event) => {\r\n        this.setState({ search: event.target.value })\r\n\r\n    }\r\n    render() {\r\n        const { robots, search } = this.state;\r\n        const filterrob = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(search.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n            <h1>Loading...</h1> :\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <Search searchchange={this.onSearch} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={filterrob} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n    }\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>  , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}